// Generated by gencpp from file cam/UInt8Array.msg
// DO NOT EDIT!


#ifndef CAM_MESSAGE_UINT8ARRAY_H
#define CAM_MESSAGE_UINT8ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cam
{
template <class ContainerAllocator>
struct UInt8Array_
{
  typedef UInt8Array_<ContainerAllocator> Type;

  UInt8Array_()
    : time_stamp(0.0)
    , data()  {
    }
  UInt8Array_(const ContainerAllocator& _alloc)
    : time_stamp(0.0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef float _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::cam::UInt8Array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cam::UInt8Array_<ContainerAllocator> const> ConstPtr;

}; // struct UInt8Array_

typedef ::cam::UInt8Array_<std::allocator<void> > UInt8Array;

typedef boost::shared_ptr< ::cam::UInt8Array > UInt8ArrayPtr;
typedef boost::shared_ptr< ::cam::UInt8Array const> UInt8ArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cam::UInt8Array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cam::UInt8Array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cam::UInt8Array_<ContainerAllocator1> & lhs, const ::cam::UInt8Array_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cam::UInt8Array_<ContainerAllocator1> & lhs, const ::cam::UInt8Array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cam::UInt8Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cam::UInt8Array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam::UInt8Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam::UInt8Array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam::UInt8Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam::UInt8Array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cam::UInt8Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83877a2239ce387d8af9561bf045b66c";
  }

  static const char* value(const ::cam::UInt8Array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83877a2239ce387dULL;
  static const uint64_t static_value2 = 0x8af9561bf045b66cULL;
};

template<class ContainerAllocator>
struct DataType< ::cam::UInt8Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cam/UInt8Array";
  }

  static const char* value(const ::cam::UInt8Array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cam::UInt8Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 time_stamp\n"
"uint8[] data\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::cam::UInt8Array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cam::UInt8Array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UInt8Array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cam::UInt8Array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cam::UInt8Array_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<float>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAM_MESSAGE_UINT8ARRAY_H
