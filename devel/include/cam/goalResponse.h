// Generated by gencpp from file cam/goalResponse.msg
// DO NOT EDIT!


#ifndef CAM_MESSAGE_GOALRESPONSE_H
#define CAM_MESSAGE_GOALRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cam
{
template <class ContainerAllocator>
struct goalResponse_
{
  typedef goalResponse_<ContainerAllocator> Type;

  goalResponse_()
    : goal_pos(0)  {
    }
  goalResponse_(const ContainerAllocator& _alloc)
    : goal_pos(0)  {
  (void)_alloc;
    }



   typedef int32_t _goal_pos_type;
  _goal_pos_type goal_pos;





  typedef boost::shared_ptr< ::cam::goalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cam::goalResponse_<ContainerAllocator> const> ConstPtr;

}; // struct goalResponse_

typedef ::cam::goalResponse_<std::allocator<void> > goalResponse;

typedef boost::shared_ptr< ::cam::goalResponse > goalResponsePtr;
typedef boost::shared_ptr< ::cam::goalResponse const> goalResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cam::goalResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cam::goalResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cam::goalResponse_<ContainerAllocator1> & lhs, const ::cam::goalResponse_<ContainerAllocator2> & rhs)
{
  return lhs.goal_pos == rhs.goal_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cam::goalResponse_<ContainerAllocator1> & lhs, const ::cam::goalResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cam::goalResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cam::goalResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam::goalResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cam::goalResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam::goalResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cam::goalResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cam::goalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b04d99b7751e9a21f2eb13dc038d6790";
  }

  static const char* value(const ::cam::goalResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb04d99b7751e9a21ULL;
  static const uint64_t static_value2 = 0xf2eb13dc038d6790ULL;
};

template<class ContainerAllocator>
struct DataType< ::cam::goalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cam/goalResponse";
  }

  static const char* value(const ::cam::goalResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cam::goalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 goal_pos\n"
"\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::cam::goalResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cam::goalResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct goalResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cam::goalResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cam::goalResponse_<ContainerAllocator>& v)
  {
    s << indent << "goal_pos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.goal_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAM_MESSAGE_GOALRESPONSE_H
