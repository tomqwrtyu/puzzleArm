// Generated by gencpp from file core/route_commandResponse.msg
// DO NOT EDIT!


#ifndef CORE_MESSAGE_ROUTE_COMMANDRESPONSE_H
#define CORE_MESSAGE_ROUTE_COMMANDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace core
{
template <class ContainerAllocator>
struct route_commandResponse_
{
  typedef route_commandResponse_<ContainerAllocator> Type;

  route_commandResponse_()
    : stm_state(0)  {
    }
  route_commandResponse_(const ContainerAllocator& _alloc)
    : stm_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _stm_state_type;
  _stm_state_type stm_state;





  typedef boost::shared_ptr< ::core::route_commandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::core::route_commandResponse_<ContainerAllocator> const> ConstPtr;

}; // struct route_commandResponse_

typedef ::core::route_commandResponse_<std::allocator<void> > route_commandResponse;

typedef boost::shared_ptr< ::core::route_commandResponse > route_commandResponsePtr;
typedef boost::shared_ptr< ::core::route_commandResponse const> route_commandResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::core::route_commandResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::core::route_commandResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::core::route_commandResponse_<ContainerAllocator1> & lhs, const ::core::route_commandResponse_<ContainerAllocator2> & rhs)
{
  return lhs.stm_state == rhs.stm_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::core::route_commandResponse_<ContainerAllocator1> & lhs, const ::core::route_commandResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace core

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::core::route_commandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::core::route_commandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core::route_commandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::core::route_commandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core::route_commandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::core::route_commandResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::core::route_commandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34ab34fb3d339f1c0bb6b256e514d01b";
  }

  static const char* value(const ::core::route_commandResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34ab34fb3d339f1cULL;
  static const uint64_t static_value2 = 0x0bb6b256e514d01bULL;
};

template<class ContainerAllocator>
struct DataType< ::core::route_commandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "core/route_commandResponse";
  }

  static const char* value(const ::core::route_commandResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::core::route_commandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 stm_state\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::core::route_commandResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::core::route_commandResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stm_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct route_commandResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::core::route_commandResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::core::route_commandResponse_<ContainerAllocator>& v)
  {
    s << indent << "stm_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stm_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CORE_MESSAGE_ROUTE_COMMANDRESPONSE_H
