// Generated by gencpp from file beacon_cam/point_transformRequest.msg
// DO NOT EDIT!


#ifndef BEACON_CAM_MESSAGE_POINT_TRANSFORMREQUEST_H
#define BEACON_CAM_MESSAGE_POINT_TRANSFORMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beacon_cam
{
template <class ContainerAllocator>
struct point_transformRequest_
{
  typedef point_transformRequest_<ContainerAllocator> Type;

  point_transformRequest_()
    : cp_pos()  {
    }
  point_transformRequest_(const ContainerAllocator& _alloc)
    : cp_pos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cp_pos_type;
  _cp_pos_type cp_pos;





  typedef boost::shared_ptr< ::beacon_cam::point_transformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beacon_cam::point_transformRequest_<ContainerAllocator> const> ConstPtr;

}; // struct point_transformRequest_

typedef ::beacon_cam::point_transformRequest_<std::allocator<void> > point_transformRequest;

typedef boost::shared_ptr< ::beacon_cam::point_transformRequest > point_transformRequestPtr;
typedef boost::shared_ptr< ::beacon_cam::point_transformRequest const> point_transformRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beacon_cam::point_transformRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beacon_cam::point_transformRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beacon_cam::point_transformRequest_<ContainerAllocator1> & lhs, const ::beacon_cam::point_transformRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cp_pos == rhs.cp_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beacon_cam::point_transformRequest_<ContainerAllocator1> & lhs, const ::beacon_cam::point_transformRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beacon_cam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beacon_cam::point_transformRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beacon_cam::point_transformRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beacon_cam::point_transformRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c59ccc2cc2cec956d695cd364b937b9";
  }

  static const char* value(const ::beacon_cam::point_transformRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c59ccc2cc2cec95ULL;
  static const uint64_t static_value2 = 0x6d695cd364b937b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beacon_cam/point_transformRequest";
  }

  static const char* value(const ::beacon_cam::point_transformRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] cp_pos\n"
;
  }

  static const char* value(const ::beacon_cam::point_transformRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cp_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct point_transformRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beacon_cam::point_transformRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beacon_cam::point_transformRequest_<ContainerAllocator>& v)
  {
    s << indent << "cp_pos[]" << std::endl;
    for (size_t i = 0; i < v.cp_pos.size(); ++i)
    {
      s << indent << "  cp_pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cp_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEACON_CAM_MESSAGE_POINT_TRANSFORMREQUEST_H
